using Microsoft.CodeAnalysis;

namespace Nemesis.SourceGenerators.Network.Factory;

[Generator]
internal sealed class MessageFactoryGenerator : ISourceGenerator
{
	private static readonly Diagnostic PublicCtor = Diagnostic.Create(
		new DiagnosticDescriptor(
			"NSG0001",
			"Message constructor with no parameters not found",
			"Message constructor with no parameters not found",
			"Source Generators",
			DiagnosticSeverity.Error,
			true),
		Location.None);

	private static readonly Diagnostic MessageIdentifierNotFound = Diagnostic.Create(
		new DiagnosticDescriptor(
			"NSG0002",
			"Message identifier not found",
			"Message identifier not found",
			"Source Generators",
			DiagnosticSeverity.Error,
			true),
		Location.None);

	public void Initialize(GeneratorInitializationContext context) =>
		context.RegisterForSyntaxNotifications(() => new MessageFactorySyntaxReceiver());

	public void Execute(GeneratorExecutionContext context)
	{
		if (context.Compilation.AssemblyName is not "Nemesis.Protocol")
			return;

		if (context.CancellationToken.IsCancellationRequested)
			return;

		if (context.SyntaxContextReceiver is not MessageFactorySyntaxReceiver syntaxReceiver)
			return;

		if (!syntaxReceiver.CandidateClasses.Any())
			return;

		var items = new List<string>();

		foreach (var classSymbol in syntaxReceiver.CandidateClasses)
		{
			var publicCtor = classSymbol.Constructors
				.Where(x => x.DeclaredAccessibility is Accessibility.Public)
				.Where(x => !x.Parameters.Any())
				.FirstOrDefault(x => x.MethodKind is MethodKind.Constructor);

			if (publicCtor is null)
			{
				context.ReportDiagnostic(PublicCtor);
				continue;
			}

			var identifierField = classSymbol
				.GetMembers()
				.OfType<IFieldSymbol>()
				.FirstOrDefault(x => x.Name.Equals("Identifier", StringComparison.Ordinal));

			if (identifierField is null)
			{
				context.ReportDiagnostic(MessageIdentifierNotFound);
				continue;
			}

			items.Add(classSymbol.ToDisplayString());
		}

		GenerateSource(context, items);
	}

	private static void GenerateSource(GeneratorExecutionContext context, IReadOnlyCollection<string> items)
	{
		var document = $$"""
		// <auto-generated />

		#nullable enable

		using System;
		using System.Diagnostics.CodeAnalysis;
		using Nemesis.Core.Network.Metadata;
		using Nemesis.Core.Network.Factory;

		namespace Nemesis.Core.Network.Factory;
		
		public sealed class MessageFactory : IMessageFactory
		{
			private static readonly IDictionary<int, Func<PokemonMessage>> Messages = new Dictionary<int, Func<PokemonMessage>>
			{
		{{string.Join(",\n", items.Select(x => $"\t\t[{x}.Identifier] = () => new {x}()"))}}
			};

			private static readonly IDictionary<int, string> MessageNames = new Dictionary<int, string>
			{
		{{string.Join(",\n", items.Select(x => $"\t\t[{x}.Identifier] = nameof({x})"))}}
			};

			public bool TryGetMessage(ushort messageId, [NotNullWhen(true)] out PokemonMessage? message)
			{
				message = null;

				if (!Messages.TryGetValue(messageId, out var factory))
					return false;

				message = factory();
				return true;
			}

			public bool TryGetMessageName(ushort messageId, [NotNullWhen(true)] out string? messageName) =>
				MessageNames.TryGetValue(messageId, out messageName);
		}
		""";

		context.AddSource("MessageFactory.g.cs", document);
	}
}